volumes:
  stormkit:

services:
  db:
    image: postgres
    restart: always
    ports:
      - published: 5432
        target: 5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    container_name: redis
    image: redis:6.2.12
    restart: always
    ports:
      - published: 6379
        target: 6379

  redis-monitoring:
    image: hibiken/asynqmon
    ports:
      - published: 8086
        target: 8086
    environment:
      - PORT=8086
      - REDIS_ADDR=redis:6379

  workerserver:
    image: ghcr.io/stormkit-io/workerserver:latest
    restart: always
    container_name: workerserver
    env_file:
      - .env
    volumes:
      # Share deployments folder between workerserver and hosting.
      # Deployments will be executed in the workerserver, and the artifacts
      # are shared with the hosting service through this shared folder.
      # This can be removed when using another service for deployments,
      # such as GitHub actions or other CI/CD platforms.
      - stormkit:/shared
    environment:
      - NODE_VERSION=22

  hosting:
    image: ghcr.io/stormkit-io/hosting:latest
    restart: always
    container_name: hosting
    # Needed only when using a FileSys Deployment
    volumes:
      # Same as workerserver. Read above for more information.
      - stormkit:/shared
    env_file:
      - .env
    environment:
      # Specifying this variable will tell the container to install Node.js
      # which is needed only if you're using serverless functions or server
      # commands in a VM. If you're hosting Stormkit in a cloud
      # provider such as AWS or Alibaba Cloud, and you're using only serverless
      # functionas, then you may not need installing Node.js as you can use their
      # cloud-native serverless services (such as Lambda or Function Compute).
      - NODE_VERSION=22
    ports:
      - mode: ingress
        target: 80
        published: 80
        protocol: tcp
      - mode: ingress
        target: 443
        published: 443
        protocol: tcp
